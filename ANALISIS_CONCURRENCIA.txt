Al accederse de forma simultánea los servicios de APIRest, se va a hacer uso simultaneo de los recursos de persistencia del servicio, por ejemplo que se esté eliminando un valor al mismo tiempo que se está actualizando el mismo, entonces pueden suceder inconsistencias en la forma en la que se almacenen los datos, en el caso específico del laboratorio yo usé varias colecciones para facilitar ciertas operaciones, estos procesos pueden hacer que un elemento se elimine de alguno y de otro no y genere problemas de sincronización, para esto se implementan medidas para hacer que la clase de persistencia sea Threat-safe, para evitar secuencializar el acceso a los servicios de la clase de persistencia se usan clases de contenedores (Map,List) que sean Threat-safe directamente provistas por java, CopyOnWriteArrayList la versión que soporta concurrencia de ArrayList y ConcurrentHashMap para HashMap, estas clases permiten el acceso de sus elementos de forma concurrente pero al accederse un mismo elemento generan áreas críticas en estos para garantizar la integridad de los datos.
